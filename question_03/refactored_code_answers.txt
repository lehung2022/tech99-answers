#1 const sortedBalances = useMemo(() => {
  return balances.filter((balance: WalletBalance) => {
    const balancePriority = getPriority(balance.blockchain);
    if (lhsPriority > -99) {  //  lhsPriority is not defined
      if (balance.amount <= 0) {  
        return true;
      }
    }
    return false;
  }).sort((lhs, rhs) => {
    const leftPriority = getPriority(lhs.blockchain);
    const rightPriority = getPriority(rhs.blockchain);
    if (leftPriority > rightPriority) {
      return -1;
    } else if (rightPriority > leftPriority) {
      return 1;
    }
  });
}, [balances, prices]);

=> Incorrect Filtering Logic in useMemo
Problem:
The filtering function incorrectly references an undefined variable lhsPriority.
The filtering logic is incorrect. It checks if lhsPriority > -99, but lhsPriority is never declared in the function.
The intended behavior seems to be filtering balances that have valid priorities and are greater than zero, but the condition is written incorrectly.

Solution: 
const sortedBalances = useMemo(() => {
  return balances
    .filter((balance) => {
      const balancePriority = getPriority(balance.blockchain); // Correct variable usage
      return balancePriority > -99 && balance.amount > 0; // Proper filtering
    })
    .sort((lhs, rhs) => getPriority(rhs.blockchain) - getPriority(lhs.blockchain)); //  Cleaner sorting
}, [balances]); 


---------------------------------
#2 const sortedBalances = useMemo(() => {
  return balances
    .filter((balance) => getPriority(balance.blockchain) > -99 && balance.amount > 0)
    .sort((lhs, rhs) => getPriority(rhs.blockchain) - getPriority(lhs.blockchain));
}, [balances, prices]); // `prices` should not be here
Problems: 
prices is included in the useMemo dependency array, but it is never used in the sorting or filtering logic.
This means every time prices change, useMemo recalculates the balances even though prices are not involved.
This causes unnecessary re-renders and slows down performance.

Solution:
Remove prices from the dependency array since prices do not affect sorting or filtering.
const sortedBalances = useMemo(() => {
  return balances
    .filter((balance) => getPriority(balance.blockchain) > -99 && balance.amount > 0)
    .sort((lhs, rhs) => getPriority(rhs.blockchain) - getPriority(lhs.blockchain));
}, [balances]); // Removed `prices`

---------------------------------
#3 const formattedBalances = sortedBalances.map((balance: WalletBalance) => {
  return {
    ...balance,
    formatted: balance.amount.toFixed()
  }
});
Problems: 
The original code sorts balances in sortedBalances, then maps them again to create formattedBalances.
This results in two separate iterations over the array, which is unnecessary.

Solution: 
Merge sorting, filtering, and formatting into a single useMemo function, reducing extra loops.

const formattedBalances = useMemo(() => {
  return balances
    .filter((balance) => getPriority(balance.blockchain) > -99 && balance.amount > 0)
    .map((balance) => ({
      ...balance,
      formatted: balance.amount.toFixed(),
    }))
    .sort((lhs, rhs) => getPriority(rhs.blockchain) - getPriority(lhs.blockchain));
}, [balances]); // Optimized: Combined all logic

---------------------------------
#4 const rows = sortedBalances.map((balance: FormattedWalletBalance, index: number) => { 
  const usdValue = prices[balance.currency] * balance.amount;
  return (
    <WalletRow 
      className={classes.row}
      key={index}
      amount={balance.amount}
      usdValue={usdValue}
      formattedAmount={balance.formatted} //  `sortedBalances` does not contain `formatted`
    />
  );
});
Problems: 
The rows mapping function assumes that sortedBalances contains FormattedWalletBalance objects.
However, formattedBalances is where formatted is added, not sortedBalances.
This leads to a type error when trying to access balance.formatted.

Solution: 
Use formattedBalances instead of sortedBalances when generating rows.
const rows = formattedBalances.map((balance) => {
  const usdValue = prices[balance.currency] * balance.amount;
  return (
    <WalletRow 
      className={classes.row}
      key={balance.currency} // Use a stable key
      amount={balance.amount}
      usdValue={usdValue}
      formattedAmount={balance.formatted} // Now contains `formatted`
    />
  );
});

---------------------------------
#5 .sort((lhs, rhs) => {
  const leftPriority = getPriority(lhs.blockchain);  //  Called multiple times
  const rightPriority = getPriority(rhs.blockchain);
  if (leftPriority > rightPriority) {
    return -1;
  } else if (rightPriority > leftPriority) {
    return 1;
  }
});

Problems: 
The original code calls getPriority(lhs.blockchain) and getPriority(rhs.blockchain) multiple times inside the sort function.
This results in redundant function calls that slow down sorting.

Solution: 
Precompute priority before sorting, reducing unnecessary function calls.
const formattedBalances = useMemo(() => {
  return balances
    .filter((balance) => getPriority(balance.blockchain) > -99 && balance.amount > 0)
    .map((balance) => ({
      ...balance,
      formatted: balance.amount.toFixed(),
      priority: getPriority(balance.blockchain), // Precompute priority
    }))
    .sort((lhs, rhs) => rhs.priority - lhs.priority);
}, [balances]);

---------------------------------
#6 const rows = formattedBalances.map((balance, index) => (
  <WalletRow 
    className={classes.row}
    key={index} // Index is not a stable key
    amount={balance.amount}
    usdValue={prices[balance.currency] * balance.amount}
    formattedAmount={balance.formatted}
  />
));
Problem:
The original code uses key={index}, which is not recommended because React relies on stable and unique keys for rendering.
Using an index as a key can cause incorrect reordering when items are added or removed.

Solution: 
Use balance.currency as a unique key, assuming each currency is unique.
const rows = formattedBalances.map((balance) => (
  <WalletRow 
    className={classes.row}
    key={balance.currency} // Stable key
    amount={balance.amount}
    usdValue={prices[balance.currency] * balance.amount}
    formattedAmount={balance.formatted}
  />
));

---------------------------------
---------------------------------
---------------------------------
---------------------------------
---------------------------------
---------------------------------
---------------------------------
---------------------------------
---------------------------------
---------------------------------
---------------------------------
---------------------------------
---------------------------------
---------------------------------
---------------------------------
---------------------------------
---------------------------------
---------------------------------
---------------------------------
---------------------------------
---------------------------------